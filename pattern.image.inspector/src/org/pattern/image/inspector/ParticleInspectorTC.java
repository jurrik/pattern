/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pattern.image.inspector;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.pattern.api.ColorIcon;
import org.pattern.data.Classificator;
import org.pattern.data.ParticleImage;
import org.pattern.data.ParticleLabel;
import org.pattern.project.MultiImageDataObject;
import org.pattern.project.PatternProject;

/**
 * Displays basic information about selected particles. Listens to selected
 * nodes of particle image.
 */
@ConvertAsProperties(
        dtd = "-//org.pattern.explorer//InspectorTC//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ParticleInspectorTC",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "inspector", openAtStartup = true)
@ActionID(category = "Window", id = "org.pattern.explorer.ParticleInspectorTC")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ParticleInspectorTCAction",
        preferredID = "ParticleInspectorTC"
)
@Messages({
    "CTL_ParticleInspectorTCAction=Inspector",
    "CTL_ParticleInspectorTC=Inspector",
    "HINT_ParticleInspectorTC=Shows information about selected particles."
})
public final class ParticleInspectorTC extends TopComponent implements ChangeListener, LookupListener, PropertyChangeListener {

    private static final int MAX_HEIGHT = 500;
    private static final int MAX_WIDTH = 1000;

    private Lookup.Result<MultiImageDataObject> result;

    // context
    private MultiImageDataObject obj;
    private PatternProject project;
    private ParticleImage image;

    // data presenters
    private SelectedParticlesTableModel tableModel;
    private final ParticlesTable table = new ParticlesTable();
    private final JPanel tableContainer;
    private final JLabel noDataLabel = new JLabel("No selection", SwingConstants.CENTER);
    private final JPanel nSelectedInCategoryContainer;
    private final JPanel nSelectedParticlesContainer;
    private final JLabel nSelectedParticlesText;
    private final JLabel nSelectedParticlesLabel;
    
    public ParticleInspectorTC() {
        initComponents();
        setName(Bundle.CTL_ParticleInspectorTC());
        setToolTipText(Bundle.HINT_ParticleInspectorTC());
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

        JScrollPane pane = new JScrollPane(table);
        pane.setMaximumSize(new Dimension(MAX_WIDTH, MAX_HEIGHT));
        table.setFillsViewportHeight(true);
        
        
        nSelectedParticlesLabel = new JLabel("Selected:");
        nSelectedParticlesText = new JLabel("-");
        nSelectedParticlesContainer = new JPanel(new FlowLayout(FlowLayout.LEFT));
        nSelectedParticlesContainer.add(nSelectedParticlesLabel);
        nSelectedParticlesContainer.add(nSelectedParticlesText);
        
        nSelectedInCategoryContainer = new JPanel();
        nSelectedInCategoryContainer.setLayout(new BoxLayout(nSelectedInCategoryContainer, BoxLayout.PAGE_AXIS));
        nSelectedInCategoryContainer.setAlignmentX(SwingConstants.LEFT);
        
        tableContainer = new JPanel();
        tableContainer.setLayout(new BoxLayout(tableContainer, BoxLayout.PAGE_AXIS));
        tableContainer.add(nSelectedParticlesContainer);
        tableContainer.add(nSelectedInCategoryContainer);
        tableContainer.add(pane);
        
        noDataLabel.setAlignmentX(CENTER_ALIGNMENT);
        
        add(noDataLabel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(MultiImageDataObject.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends MultiImageDataObject> objs = result.allInstances();
        if (!objs.isEmpty()) {
            obj = objs.iterator().next();
            setImageContext();
            setProjectContext();
            updateTableModel();
            updateSelectedCounts();
            updateCategoryCounts();
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        // listens to selected nodes
        if (e.getSource().getClass() == ParticleImage.class) {
            updateTableModel();
            updateCategoryCounts();
            updateSelectedCounts();
        }
    }

    private void setImageContext() {
        if (image != null) {
            image.unregisterListener(this);
        }
        image = obj.getImage().getSelectedImage();
        image.registerListener(this);
    }

    private void setProjectContext() {
        if (project != null) {
            project.removeChangeListener(this);
        }
        project = obj.getOwnerProject();
        project.addChangeListener(this);
    }

    private void updateTableModel() {
        if (image != null) {
            if (image.getSelectedParticles().isEmpty()) {
                remove(tableContainer);
                add(noDataLabel, BorderLayout.CENTER);
                revalidate();
                repaint();
            } else {
                tableModel = new SelectedParticlesTableModel(
                        project.getClassificator(),
                        image.getSelectedParticles()
                );
                table.setModel(tableModel);
                remove(noDataLabel);
                add(tableContainer, BorderLayout.CENTER);
                revalidate();
                repaint();
            }
        }
    }
    
    private void updateSelectedCounts(){
        if(image != null){
            nSelectedParticlesText.setText(String.valueOf(image.getSelectedParticles().size()));
        }else{
            nSelectedParticlesText.setText("-");
        }
    }
    
    private void updateCategoryCounts(){
        if(project.getClassificator() != null && image != null){
            Classificator cl = project.getClassificator();
            nSelectedInCategoryContainer.removeAll();
            for (ParticleLabel label : cl.getLabels()) {
                int count = image.countSelectedParticlesWithLabelId(label.getId());
                CategoryNumberLabel component = new CategoryNumberLabel(label, count);
                nSelectedInCategoryContainer.add(component);
            }
            nSelectedInCategoryContainer.revalidate();
            nSelectedInCategoryContainer.repaint();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // listens when classificator changed within the project
        if (evt.getSource().equals(project)) {
            updateTableModel();
        }
    }
    
    private class CategoryNumberLabel extends JPanel{

        public CategoryNumberLabel(ParticleLabel label, int count) {
            setLayout(new FlowLayout(FlowLayout.LEFT));
            JLabel comp = new JLabel();
            comp.setIcon(new ColorIcon(label.getColor()));
            comp.setText(String.valueOf(count));
            add(comp);
        }
        
    }
    
}
